## Reading questions

1.  A given program spends 10% of its time in an initial startup
    phase, and then 90% of its time in work that can be easily
    parallelized.  Assuming a machine with homogeneous cores, plot the
    idealized speedup and parallel efficiency of the overall code
    according to Amdahl's law for up to 128 cores.  If you know how,
    you should use a script to produce this plot, with both the serial
    fraction and the maximum number of cores as parameters.

    Speedup = p - alpha*(p-1) = 128 - 0.1*(128-1) = 115.3
    Still getting acquainted to plotting the graph - Will resubmit once I figure it out :)

2.  Suppose a particular program can be partitioned into perfectly
    independent tasks, each of which takes time tau.  Tasks are
    set up, scheduled, and communicated to p workers at a (serial)
    central server; this takes an overhead time alpha per task.
    What is the theoretically achievable throughput (tasks/time)?

    (as worked out in class)
    Time at server per task = alpha
    Time per task is not specified -- call it T
    Time to complete k tasks is k*(T+alpha) in total
    Parallel part is the k*T part.
    Overhead for k tasks (unavoidable) = k*alpha
    k tasks in time k*alpha is best case -- rate is k/(k*alpha) = 1/alpha

    T is insignificant here.

3.  Under what circumstances is it best to not tune?
    - When human time it takes to tune is more expensive than the computer time saved.
    - When tuning could potentially result in making a mess of the code base.
    - When the code has bottlenecks where majority of time is spent.(as per notes)

4.  The class cluster consists of eight nodes and fifteen Xeon Phi
    accelerator boards.  Based on an online search for information on
    these systems, what do you think is the theoretical peak flop rate
    (double-precision floating point operations per second)?  Show how
    you computed this, and give URLs for where you got the parameters
    in your calculation.  (We will return to this question again after
    we cover some computer architecture.)
    
    Intel Xeon Phi peak double precision FLOPS:
    16 flops/clock * 60 cores *1.053 GHz = 1010.88Gf/s

    96 cores and 15 accelerators result in:
    96(120) + 15(1010.88) = 26683.2 GF/s
    
5.  What is the approximate theoretical peak flop rate for your own machine?

    My machine stats - Macbook Pro (2011) 2.8 GHz Intel Core i7
    theoretical peak flop rate = Number of Cores * Average frequency * Operations per cycle
			       = 4 * 2.8GHz * 16
			       = 179.2 GF/s


